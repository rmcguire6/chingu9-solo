{"version":3,"sources":["components/SearchBar.js","components/SearchList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearchChange","e","preventDefault","searchText","target","value","trim","state","react_default","a","createElement","className","onSubmit","type","name","placeholder","Component","columns","title","dataIndex","key","width","SearchList","es","data","list","rowKey","record","id","App","setState","_this2","fetch","then","response","json","error","console","log","filteredList","_this3","filter","item","toLowerCase","includes","components_SearchBar","components_SearchList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3562db7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            searchText: ''\r\n        }\r\n    }\r\n       \r\n    \r\n    handleSearchChange = (e) => {\r\n        e.preventDefault();\r\n        let searchText = e.target.searchText.value.trim();\r\n        this.props.handleSearchChange(searchText);\r\n    } \r\n    render() {\r\n        return (\r\n    <div className=\"search-bar\">\r\n    <form  onSubmit={this.handleSearchChange}>\r\n          <input type=\"text\" name=\"searchText\" placeholder=\"Search by name\" />\r\n          <button className=\"button\">Search</button>\r\n        </form>\r\n    </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","import React from 'react'\n\nimport Table from 'rc-table'\n\nconst columns = [\n    \n    {title: 'Name', dataIndex: 'name', key:'name', width: 75},\n    {title: 'Id', dataIndex:'id', key: 'id', width: 10},\n    {title: 'Name Type', dataIndex: 'nametype', key: 'nametype',width: 15},\n    {title: 'Rec Class', dataIndex: 'recclass', key:'recclass', width: 25},\n    {title: 'Mass(g)', dataIndex: 'mass', key:'mass', width: 10},\n    {title: 'Fall', dataIndex: 'fall', key:'fall', width: 10},\n    {title: 'Year', dataIndex: 'year', key:'year', width: 40},\n    {title: 'Latitude', dataIndex: 'reclat', key:'reclat', width: 30},\n    {title: 'Longitude', dataIndex: 'reclong', key:'reclong', width: 30},\n]\n\nconst SearchList = (props) => {\n    return (\n    <div className=\"search-results\">\n         <Table columns={columns} data={props.list} rowKey={record => record.id} />       \n    </div> \n    )}\nexport default SearchList;","import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar'\nimport SearchList from './components/SearchList'\n\nclass App extends Component {\n  state = {\n    name: '',\n    data: []\n  }\n  componentDidMount() {\n    try {\n      fetch('https://data.nasa.gov/resource/gh4g-9sfh.json').then((response)=> {\n      response.json().then((data) => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          this.setState(()=>{\n            return ({ data: data})\n          })\n        }\n      })\n    })\n  } catch (e) {\n    console.log('Error loading data')\n  }\n}\n\nhandleSearchChange = (name) => {\n    this.setState(() => ({\n      name: name\n    }))\n\n}\n  render() {\n    let filteredList = []\n    filteredList = this.state.data.filter(item => item.name.toLowerCase().includes(this.state.name.toLowerCase()))\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n      <h2>Meteorite Explorer</h2> \n      </div>\n      <div className=\"search-panel\">\n        <SearchBar handleSearchChange ={this.handleSearchChange} />\n        {this.state.name !== '' ? <SearchList list={filteredList}/> : <SearchList list={this.state.data} />}\n      </div>\n    </div>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}